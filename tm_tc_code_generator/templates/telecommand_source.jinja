#include "{{snake_case}}.h"

//******************************************************************************
// Interface implementations
//******************************************************************************
static bool {{camel_case}}_isEnabled(void *self) {
  // TODO: Replace with actual implementation
}

static bool {{camel_case}}_execute(void *self) {
  // TODO: Replace with actual implementation
}

/**
 * @brief Autogenerated code to get arguments interface from telecommand, do not edit
 *
 * @param self {{camel_case}} void object
 * @return TelecommandArgumentsInterface* Arguments interface of the given telecommand
 */
static TelecommandArgumentsInterface *{{camel_case}}_getArguments(void *self) {
  {{camel_case}} *_self = ({{camel_case}} *)self;
  return {{camel_case}}Base_viewAsTelecommandArgumentsInterface(&_self->base);
}

//******************************************************************************
// Private methods
//******************************************************************************
/**
 * @brief Autogenerated code to initialize interface and base, do not edit
 *
 * @param self {{camel_case}} instance
 */
static void {{camel_case}}_init({{camel_case}} *self) {
  self->telecommandInterfaceView.instance = self;
  self->telecommandInterfaceView.isEnabled = {{camel_case}}_isEnabled;
  self->telecommandInterfaceView.execute = {{camel_case}}_execute;
  self->telecommandInterfaceView.getArguments = {{camel_case}}_getArguments;

  {{camel_case}}Base_create(&self->base);
}

//******************************************************************************
// Public methods
//******************************************************************************
void {{camel_case}}_create({{camel_case}} *self /* TODO: Add arguments if needed */) {
  {{camel_case}}_init(self);

  // TODO: Initialize objects/interfaces as needed
}
