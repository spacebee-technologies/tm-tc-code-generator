name: Build Python package

on:
  push:
  release:
      types: [published]  # Trigger on GitHub release creation

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v5

      # Set up Python
      - uses: actions/setup-python@v6
        with:
          python-version: '3.12'  # TODO: Take version from pyproject.toml?

      # Install Poetry
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      # Install dependencies
      - name: Install dependencies
        run: poetry install --no-root

      # Extract version from Git tag (only for releases)
      - name: Extract and set version from Git tag
        if: github.event_name == 'release' && github.event.action == 'published'
        run: |
          # Extract version from tag (e.g., v0.1.1 -> 0.1.1)
          VERSION=$(echo "${{ github.ref }}" | sed 's/refs\/tags\/v//')
          poetry version $VERSION
          echo "Set package version to $VERSION"
        env:
          GITHUB_REF: ${{ github.ref }}

      # Build package
      - name: Build package
        run: poetry build

      # Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tm-tc-code-generator-dist
          path: dist/

  publish:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v5

      # Set up Python
      - uses: actions/setup-python@v6
        with:
          python-version: '3.12'  # TODO: Take version from pyproject.toml?

      # Install Poetry
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      # Download artifacts
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: tm-tc-code-generator-dist
          path: dist/

      # Publish to PyPI
      - name: Publish to PyPI
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
          poetry publish
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
